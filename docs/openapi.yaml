openapi: 3.0.3

info:
  title: 'Poligon API'
  version: 0.1.0
  description: This is Poligon API Description
  contact: {
    name: Yakub Jorayev,
    email: jorayev2494@gmail.com,
    url: https://github.com/jorayev2494
  }

servers:
  - {
      description: 'localhost',
      url: 'http://127.0.0.1:8088/api'
  }
  - {
      description: 'server',
      url: 'http://80.208.225.82:8088/api'
  }

tags: null

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: "Alex"
                last_name:
                  type: string
                  example: "Alexeev"
                email:
                  type: string
                  example: "user@gm.com"
                password:
                  type: string
                  example: "secreT12345"
                password_confirmation:
                  type: string
                  example: "secreT12345"
      responses:
        204:
          description: User success login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User successfully registered"

  /auth/login:
    post:
      summary: Login
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@gm.com"
                password:
                  type: string
                  example: "secreT12345"
      responses:
        400:
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid credentials"
        200:
          description: User success logined
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSchema'

  /auth/refresh:
    post:
      summary: Refresh access token
      tags:
        - Authentication
      responses:
        401:
          description: User Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedSchema'
        200:
          description: Access Token success full refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSchema'

  /auth/logout:
    post:
      summary: Logout
      tags:
        - Authentication
      responses:
        401:
          description: User Unauthenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthenticatedSchema'
        204:
          description: Success logouted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully registered"

  /profile:
    get:
      summary: Show profile
      tags:
        - Profile
      responses:
        200:
          description: Show profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 93
                  first_name:
                    type: string
                    example: "Alex"
                  last_name:
                    type: string
                    example: "Alexeev"
                  avatar:
                    type: string
                    example: "http://127.0.0.1:8088/storage/users/avatars/adonaodnoawndncons.jpg"
                    nullable: true
                  email:
                    type: string
                    example: "user@gm.com"
                  phone:
                    type: string
                    example: "+380324892738"
                    enum:
                      - ""
                  email_verified_at:
                    type: string
                    example: "01-02-2022 20:02:53"
                    nullable: true
                  created_at:
                    type: string
                    example: "01-02-2022 20:02:53"
                  updated_at:
                    type: string
                    example: "01-02-2022 20:02:53"
                  full_name:
                    type: string
                    example: "Alex Alexeev"

  /users:
    description: Get Users
    get:
      summary: Get Users
      tags:
        - Public Users
      responses:
        200:
          description: "User Resource"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResource'

    post:
      summary: Create User
      tags:
        - Public Users
      requestBody:
        content:
          applcation/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: "Alex"
                last_name:
                  type: string
                  example: "Petrov"
                avatar:
                  type: string
                  format: binary
                email:
                  type: string
                  example: "example@mail.com"
                  required: true
                  uniqueItems: true
                password:
                  type: string
                  example: "Secret12345!"
                  required: true
                password_confirmation:
                  type: string
                  example: "Secret12345!"
                  required: true
                phone:
                  type: string
                  example: "12435445"
      responses:
        200:
          description: "User created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResource'

  /users/{user_id}:
    get:
      summary: "Show User"
      tags:
        - Public Users

      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 3

      responses:
        200:
          description: "Show User"
          content:
            application/jsom:
              schema:
                $ref: '#/components/schemas/UserResource'

    put:
      summary: Update User
      tags:
        - Public Users

      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 3

      requestBody:
        content:
          appication/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: "Alex"
                last_name:
                  type: string
                  example: "Petrov"
                email:
                  type: string
                  example: "example@mail.com"
                  uniqueItems: true
                password:
                  type: string
                  example: "Secret12345!"
                password_confirmation:
                  type: string
                  example: "Secret12345!"
                phone:
                  type: string
                  example: "12435445"
      responses:
        202:
          description: Accepted Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResource'

    delete:
      summary: Delete User
      tags:
        - Public Users

      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 3

      responses:
        204:
          description: No Content

  /users/{id}/avatars:
    post:
      description: Update user avatar
      tags:
        - Update user avatar
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 10
        - name: avatar
          in: query
          required: false
          schema:
            type: string
            format: binary
            example: cover.jpg
            enum:
              - ".jpeg"
              - ".jpg"
              - ".png"
      responses:
        200:
          description: "Updates user avatar"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResource'

components:
  schemas:
    UserResource:
      type: object
      properties:
        id:
          type: integer
          example: 1
        first_name:
          type: string
          example: "Linda"
        last_name:
          type: string
          example: "Cronin"
        full_name:
          type: string
          example: "Linda Cronin"
        avatar:
          type: string
          example: "http://localhost:8088/storage/users/avatars/3PE1kInVVuxzayKHAQHjPuc8nDCOawhs.jpg"
          enum:
            - null
        email:
          type: string
          example: "test@gmail.com"
        phone:
          type: string
          example: "+38095123456"
        created_at:
          type: string
          example: "17 hours ago"
        updated_at:
          type: string
          example: "17 hours ago"
    LoginSchema:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC8xMjcuMC4wLjE6ODA4OFwvYXBpXC9hdXRoXC9sb2dpbiIsImlhdCI6MTY0Mzc1MDQxMywiZXhwIjoxNjQzNzU0MDEzLCJuYmYiOjE2NDM3NTA0MTMsImp0aSI6IlF2d09wQmhKR0lFVWF6UDgiLCJzdWIiOjkzLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.OHCniB0IcBwA0vvJiTMGneB4KA9xBuEVmyNJBf-O9iI"
        token_type:
          type: string
          example: "bearer"
        expire_in:
          type: integer
          example: 3600
    UnauthenticatedSchema:
      type: object
      properties:
        error:
          type: string
          example: "Unauthenticated."

  responses: null
  headers: null
  parameters: null
  links: null
  examples: null
